function numberVal(n) {
    console.log("二进制====" + n.toString(2))
    var count = 0;
    while (n != 0) {
        if ((n & 1) == 1) {
            count++;
        }
        n = n >>> 1
    }
    return count
}
console.log(numberVal(-3))
// console.log(1111 & 11)
//&此为AND运算-js中的位运算符
//&运算是两边都有1时则返回1
//示例中的console.log(1111 & 11)=3
//因为  1111 与 11相比较后1111会移一位继续比较
//即： 1111&11   其中1111的后两位有11此时返回一个1
//然后  1111向右移动一位
//则会变成  111&11  此时  111后两位含有11此时返回一个1，紧接着移位
// 11 & 11 ——> 1 & 11 不满足则返回 0

// >>>也是js位运算符	零填充右位移	通过从左推入零来向右位移，并使最右边的位脱落。
//20210311未来可能有补充

//补充： 原码-反码-补码
//原码： 是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。
//反码： 符号位为1的其余数取反
//补码： 补码的符号位不变末位数+1
//所有正整数的原反补相同
//用3举例  原码：00000011 反码：00000011 补码：00000011
//-3举例  原码：10000011  反码：11111100 补码：11111101
//计算机存储的是补码，因为计算机中没有减法，1-1其实就是1+(-1),所以反码是解决了减法的问题，但是1-1=0；1+(-1)=-0
//显然0=-0，但是一个零却有两种状态，计算机也不会允许，即需要找一个正数代表一个负数
//补码就是解决了这个问题，补码正是利用了同余原理。钟表时针指向10代表10   10-2=8点钟   10+10=8点钟 ====>  8%12=8   20%12=8 余数相同

